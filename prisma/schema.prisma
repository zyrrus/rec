generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@map("rec_account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rec_session")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  lists         UserList[]

  @@map("rec_user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("rec_verification_token")
}

model UserRole {
  user_id String
  role    String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role])
  @@map("rec_user_role")
}

model ListTemplate {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  length       Int
  content_type String
  deleted_at   DateTime?
  user_lists   UserList[]

  @@map("rec_list_template")
}

model UserList {
  id               Int               @id @default(autoincrement())
  list_template    ListTemplate      @relation(fields: [list_template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  list_template_id Int
  contents         UserListContent[]
  user             User              @relation(fields: [user_id], references: [id])
  user_id          String

  @@map("rec_user_list")
}

model UserListContent {
  id           Int      @id @default(autoincrement())
  user_list    UserList @relation(fields: [user_list_id], references: [id])
  user_list_id Int
  content      Content  @relation(fields: [content_id], references: [id])
  content_id   Int

  @@map("rec_user_list_content")
}

model Content {
  id                Int               @id @default(autoincrement())
  user_list_content UserListContent[]
  name              String
  artist            String
  image_url         String
  external_url      String

  @@map("rec_content")
}
